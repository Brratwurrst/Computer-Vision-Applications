import cv2
import torch
from PIL import Image
from torchvision import transforms

# Define the transformation
transform = transforms.Compose([
    transforms.ToTensor(),
])


# Load the model
model = torch.hub.load('ultralytics/yolov5', 'custom', path=r"C:\Users\linus\Downloads\yolov5n-seg.pt")

# Start the video capture
cap = cv2.VideoCapture(0)

while True:
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Convert the frame to PIL Image
    img = Image.fromarray(frame)

    # Apply the transformation
    img = transform(img)

    # Add a batch dimension
    img = img.unsqueeze(0)

    # Perform inference
    results = model(img)

    # Get the bounding boxes and class scores
    boxes = results.xyxy[0].cpu().detach().numpy()  # Bounding boxes

    # Draw the bounding boxes and labels on the frame
    for box in boxes:
        x1, y1, x2, y2, confidence, class_id = box
        label = str(classes[int(class_id)])

        if confidence > 0.5:
            cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)
            cv2.putText(frame, label, (int(x1), int(y1 - 10)), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)
            
    # Display the resulting frame
    cv2.imshow('frame', frame)

    # Break the loop on 'q' key press
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the capture
cap.release()
cv2.destroyAllWindows()