import cv2
import time
import numpy as np
from sklearn import linear_model
import random
from sklearn.cluster import DBSCAN

cap = cv2.VideoCapture('https://192.168.1.76:8080/video') #, cv2.CAP_DSHOW)
k = 30
target_width = 300
target_height = 200
def line_params(line):
    x1, y1, x2, y2 = line[0]
    slope = (y2 - y1) / (x2 - x1) if x2 != x1 else 1e10
    intercept = y1 - slope * x1
    length = np.sqrt((x2 - x1)**2 + (y2 - y1)**2)
    return slope, intercept, length
def line_intersection(line1, line2):
    xdiff = (line1[0][0] - line1[1][0], line2[0][0] - line2[1][0])
    ydiff = (line1[0][1] - line1[1][1], line2[0][1] - line2[1][1])

    def det(a, b):
        return a[0] * b[1] - a[1] * b[0]

    div = det(xdiff, ydiff)
    if div == 0:
       raise Exception('lines do not intersect')

    d = (det(*line1), det(*line2))
    x = det(d, xdiff) / div
    y = det(d, ydiff) / div
    return x, y

def angle_between_lines(line1, line2):
    # Calculate the direction vectors of the lines
    dx1 = line1[0][2] - line1[0][0]
    dy1 = line1[0][3] - line1[0][1]
    dx2 = line2[0][2] - line2[0][0]
    dy2 = line2[0][3] - line2[0][1]
    
    # Calculate the dot product
    dot_product = dx1*dx2 + dy1*dy2
    
    # Calculate the magnitudes of the vectors
    mag1 = np.sqrt(dx1**2 + dy1**2)
    mag2 = np.sqrt(dx2**2 + dy2**2)
    
    # Calculate the angle between the lines
    #angle = np.arccos(dot_product / (mag1 * mag2)) * 180 / np.pi
    angle = np.arccos(np.clip(dot_product / (mag1 * mag2), -1, 1)) * 180 / np.pi
    return angle

def order_points(pts):
    """Order points (top-left, top-right, bottom-right, bottom-left)"""
    rect = np.zeros((4, 2), dtype="float32")
    s = pts.sum(axis=1)
    rect[0] = pts[np.argmin(s)]
    rect[2] = pts[np.argmax(s)]
    diff = np.diff(pts, axis=1)
    rect[1] = pts[np.argmin(diff)]
    rect[3] = pts[np.argmax(diff)]
    return rect

def points_2_line(points):
    x1 = points[:2]
    x2 = points[2:]
    x1 = np.append(x1, [1])
    x2 = np.append(x2, [1])
    return np.cross(x1,x2)

def find_corners(lines, shape_frame):
    intersects = []
    for i in range(len(lines)):
        for j in range(len(lines)):
            if i != j:
                l1 = points_2_line(lines[i])
                l2 = points_2_line(lines[j])
                x12 = np.cross(l1, l2)
                if x12[2] == 0:
                    continue
                else:
                    x12 = x12/x12[2]
                    if abs(x12[0]) < shape_frame[1] and abs(x12[1]) < shape_frame[0]:
                        if list(x12[:2]) not in intersects:
                            intersects.append(list(x12[:2]))
    return [[int(j) for j in i] for i in intersects]

paused = False
while(True):

    key = cv2.waitKey(1) & 0xFF
    if key == ord('p'):
        paused = not paused
    elif key == ord('q'):
        break

    if paused:
        continue
    # Capture frame-by-frame
   
    start_time = time.time()
     
    # Set the video resolution to 480p
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

    # Capture frame-by-frame
    ret, frame = cap.read()

    # Convert the image to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    Edges = cv2.Canny(blurred,200,200)

    edge_points = np.argwhere(Edges != 0)
    edge_points = edge_points[:, [1,0]]

    dilated = cv2.dilate(Edges, None, iterations=1)

    # Use the Hough Transform to detect lines
    lines = cv2.HoughLinesP(dilated, 0.5, np.pi/270, 50, minLineLength=220, maxLineGap=50).squeeze()

    if lines is not None:

        selected_lines = lines[:4]

        for line in selected_lines:

            x1, y1, x2, y2 = line

            cv2.line(frame, (x1, y1), (x2, y2), (0, 255, 255), 2)


        corner_coordinates = find_corners(selected_lines, frame.shape)
     # Convert the corner points to a NumPy array

        corner_points = np.array(corner_coordinates, dtype=np.float32)

        print(corner_points)

        corner_points = order_points(corner_points)

        # Define the target rectangle

        target_rectangle = np.array([[0, 0], [target_width, 0], [target_width, target_height], [0, target_height]],

                                    dtype=np.float32)

        try:

            # Calculate the perspective transformation matrix

            transform_matrix = cv2.getPerspectiveTransform(corner_points, target_rectangle)

            rectified_image = cv2.warpPerspective(frame, transform_matrix, (target_width, target_height))

           

            h, status = cv2.findHomography(corner_points, target_rectangle)

            im_dst = cv2.warpPerspective(frame, h, (target_width, target_height))

           

            cv2.imshow('Rectified Image', im_dst)

        except cv2.error:

            pass
    # # If lines are detected
    # if lines is not None:

    #     lines_params = [line_params(line) for line in lines]


    #     # Cluster lines based on slope and intercept
    #     clustering = DBSCAN(eps=2.0, min_samples=1).fit(lines_params)

    #     # Get the labels of the clusters
    #     labels = clustering.labels_

    #     # Get the line with the longest length from each cluster
    #     filtered_lines = []
    #     for label in set(labels):
    #         if label != -1:
    #             cluster_lines = [lines[i] for i in range(len(lines)) if labels[i] == label]
    #             if cluster_lines:
    #                 longest_line = max(cluster_lines, key=line_params)
    #                 filtered_lines.append(longest_line)
    #     # # Draw the lines
    #     # for line in filtered_lines:
    #     #     x1, y1, x2, y2 = line[0]
    #     #     cv2.line(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            
    #     for line in filtered_lines:
    #         slope, intercept, _ = line_params(line)
    #         if slope != 1e10:
    #             x1 = 0
    #             y1 = int(intercept)
    #             x2 = frame.shape[1]
    #             y2 = int(slope * frame.shape[1] + intercept)
    #         else:
    #             x1 = x2 = line[0][0]
    #             y1 = 0
    #             y2 = frame.shape[0]
    #         cv2.line(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)
            
         
  
        intersections = []
    
        # for i in range(len(filtered_lines)):
        #     for j in range(i+1, len(filtered_lines)):
        #         angle = angle_between_lines(filtered_lines[i], filtered_lines[j])
        #         if 20 <= angle <= 150:
        #             try:
        #                 intersection = line_intersection((filtered_lines[i][0][:2], filtered_lines[i][0][2:]), (filtered_lines[j][0][:2], filtered_lines[j][0][2:]))
        #                 y, x = map(int, intersection)
        #                 if 0 <= intersection[0] <= frame.shape[1] and 0 <= intersection[1] <= frame.shape[0]: # and Edges[max(0, y-k):min(frame.shape[0], y+k), max(0, x-k):min(frame.shape[1], x+k)].any():
        #                     intersections.append(intersection)
        #             except:
        #                 pass


        # Draw the intersections
        for intersection in intersections:
            y, x = map(int, intersection)
            if Edges[max(0, y-50):min(frame.shape[0], y+50), max(0, x-50):min(frame.shape[1], x+50)].any():
                cv2.circle(frame, tuple(map(int, intersection)), 5, (0, 0, 255), -1)

    
        if len(intersections) == 4:
        # Order the points in the following order: [top-left, top-right, bottom-right, bottom-left]
            intersections.sort(key=lambda x: -x[1])
            if intersections[0][0] > intersections[1][0]:
                intersections[0], intersections[1] = intersections[1], intersections[0]
            if intersections[2][0] < intersections[3][0]:
                intersections[2], intersections[3] = intersections[3], intersections[2]

            src_points = np.float32(intersections)
            dst_points = np.float32([[0, 0], [frame.shape[1], 0], [frame.shape[1], frame.shape[0]], [0, frame.shape[0]]])
    
            print(src_points.shape)  
            print(dst_points.shape)
            M = cv2.getPerspectiveTransform(src_points, dst_points)
            warped = cv2.warpPerspective(frame, M, (frame.shape[1], frame.shape[0]))
    
            cv2.imshow('Warped', warped)


    # Display the resulting frame
    cv2.imshow('Frame', frame)
    cv2.imshow('Edges', dilated)

       

    # Break the loop on 'q' key press
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture and close windows
cap.release()
cv2.destroyAllWindows()